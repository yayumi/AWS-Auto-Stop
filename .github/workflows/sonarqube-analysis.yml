name: SonarQube Analysis and Build
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      # SonarQube 스캔
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894
            -Dsonar.sources=.
            -Dsonar.python.version=3.8

      # Quality Gate 상태 확인 및 PR에 결과 표시
      - name: Check Quality Gate and Issues
        id: sonarqube-check
        run: |
          # API 응답 대기 시간 증가
          sleep 20
          
          echo "### SonarQube Analysis Results" > sonar-report.md
          echo "" >> sonar-report.md
          
          # Quality Gate 상태 확인
          QUALITY_GATE_RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894")
          
          if [ $? -eq 0 ]; then
            # 메트릭 정보 가져오기
            METRICS_RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,security_hotspots,reliability_rating,security_rating,sqale_rating")
            
            # 이슈 정보 가져오기 (심각도별로 분리)
            BLOCKERS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894&severities=BLOCKER&resolved=false")
            CRITICALS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894&severities=CRITICAL&resolved=false")
            MAJORS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894&severities=MAJOR&resolved=false")
            
            # Quality Gate 상태 표시
            STATUS=$(echo $QUALITY_GATE_RESPONSE | jq -r '.projectStatus.status')
            if [ "$STATUS" = "OK" ]; then
              echo "#### Quality Gate Status: ✅ PASSED" >> sonar-report.md
            else
              echo "#### Quality Gate Status: ❌ FAILED" >> sonar-report.md
            fi
            echo "" >> sonar-report.md
            
            # 메트릭 정보 표시
            echo "#### Quality Metrics" >> sonar-report.md
            echo "| Metric | Value | Rating |" >> sonar-report.md
            echo "|--------|-------|---------|" >> sonar-report.md
            
            # Reliability (Bugs)
            BUGS=$(echo $METRICS_RESPONSE | jq -r '.component.measures[] | select(.metric == "bugs").value')
            RELIABILITY=$(echo $METRICS_RESPONSE | jq -r '.component.measures[] | select(.metric == "reliability_rating").value')
            echo "| Bugs | ${BUGS:-0} | ${RELIABILITY:-N/A} |" >> sonar-report.md
            
            # Security (Vulnerabilities)
            VULNS=$(echo $METRICS_RESPONSE | jq -r '.component.measures[] | select(.metric == "vulnerabilities").value')
            SECURITY=$(echo $METRICS_RESPONSE | jq -r '.component.measures[] | select(.metric == "security_rating").value')
            echo "| Vulnerabilities | ${VULNS:-0} | ${SECURITY:-N/A} |" >> sonar-report.md
            
            # Maintainability (Code Smells)
            CODE_SMELLS=$(echo $METRICS_RESPONSE | jq -r '.component.measures[] | select(.metric == "code_smells").value')
            MAINTAINABILITY=$(echo $METRICS_RESPONSE | jq -r '.component.measures[] | select(.metric == "sqale_rating").value')
            echo "| Code Smells | ${CODE_SMELLS:-0} | ${MAINTAINABILITY:-N/A} |" >> sonar-report.md
            
            # Coverage and Duplication
            COVERAGE=$(echo $METRICS_RESPONSE | jq -r '.component.measures[] | select(.metric == "coverage").value')
            DUPLICATION=$(echo $METRICS_RESPONSE | jq -r '.component.measures[] | select(.metric == "duplicated_lines_density").value')
            echo "| Coverage | ${COVERAGE:-0}% | - |" >> sonar-report.md
            echo "| Duplication | ${DUPLICATION:-0}% | - |" >> sonar-report.md
            
            echo "" >> sonar-report.md
            
            # 이슈 상세 정보 표시
            echo "#### Detailed Issues" >> sonar-report.md
            echo "" >> sonar-report.md
            
            # Blocker Issues
            BLOCKER_COUNT=$(echo $BLOCKERS | jq -r '.total')
            if [ "$BLOCKER_COUNT" != "0" ]; then
              echo "🚫 **Blocker Issues** (${BLOCKER_COUNT})" >> sonar-report.md
              echo "| Rule | Message | File |" >> sonar-report.md
              echo "|------|---------|------|" >> sonar-report.md
              echo $BLOCKERS | jq -r '.issues[] | "| \(.rule) | \(.message) | \(.component) |"' >> sonar-report.md
              echo "" >> sonar-report.md
            fi
            
            # Critical Issues
            CRITICAL_COUNT=$(echo $CRITICALS | jq -r '.total')
            if [ "$CRITICAL_COUNT" != "0" ]; then
              echo "❗ **Critical Issues** (${CRITICAL_COUNT})" >> sonar-report.md
              echo "| Rule | Message | File |" >> sonar-report.md
              echo "|------|---------|------|" >> sonar-report.md
              echo $CRITICALS | jq -r '.issues[] | "| \(.rule) | \(.message) | \(.component) |"' >> sonar-report.md
              echo "" >> sonar-report.md
            fi
            
            # Major Issues
            MAJOR_COUNT=$(echo $MAJORS | jq -r '.total')
            if [ "$MAJOR_COUNT" != "0" ]; then
              echo "⚠️ **Major Issues** (${MAJOR_COUNT})" >> sonar-report.md
              echo "| Rule | Message | File |" >> sonar-report.md
              echo "|------|---------|------|" >> sonar-report.md
              echo $MAJORS | jq -r '.issues[] | "| \(.rule) | \(.message) | \(.component) |"' >> sonar-report.md
              echo "" >> sonar-report.md
            fi
            
            echo "---" >> sonar-report.md
            echo "🔍 [View detailed report](${{ secrets.SONAR_HOST_URL }}/dashboard?id=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894)" >> sonar-report.md
          else
            echo "⚠️ Failed to fetch SonarQube analysis results" >> sonar-report.md
          fi
          
          # PR 이벤트인 경우에만 결과 저장
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "SONAR_REPORT<<EOF" >> $GITHUB_ENV
            cat sonar-report.md >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
        continue-on-error: true

      # PR에 결과 코멘트 추가
      - name: Add PR Comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: sonarqube-report
          message: ${{ env.SONAR_REPORT }}

      - name: Continue with build
        run: echo "Continuing with build process..."
