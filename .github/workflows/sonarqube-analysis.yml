# Quality Gate 상태 확인 및 PR에 결과 표시
- name: Check Quality Gate and Issues
    id: sonarqube-check
    run: |
      # API 응답 대기 시간 증가
      sleep 10
      
      # 결과 파일 생성
      echo "### SonarQube Analysis Results" > sonar-report.md
      echo "" >> sonar-report.md
      
      # Quality Gate 상태 확인 및 출력
      QUALITY_GATE_RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894")
      
      # API 응답 디버깅 - 수정된 부분
      echo "Debug - Quality Gate Response:"
      echo "${QUALITY_GATE_RESPONSE}"
      
      # 응답 검증
      if [ -z "${QUALITY_GATE_RESPONSE}" ]; then
        echo "#### Quality Gate Status: ⚠️ No response from SonarQube" >> sonar-report.md
      else
        # JSON 유효성 검사
        if echo "${QUALITY_GATE_RESPONSE}" | jq empty 2>/dev/null; then
          # Quality Gate 상태 파싱
          STATUS=$(echo "${QUALITY_GATE_RESPONSE}" | jq -r '.projectStatus.status // "UNKNOWN"')
          
          # 상태에 따른 출력
          if [ "$STATUS" = "OK" ]; then
            echo "#### Quality Gate Status: ✅ PASSED" >> sonar-report.md
          elif [ "$STATUS" = "ERROR" ]; then
            echo "#### Quality Gate Status: ❌ FAILED" >> sonar-report.md
          else
            echo "#### Quality Gate Status: ⚠️ UNKNOWN" >> sonar-report.md
          fi
        else
          echo "#### Quality Gate Status: ⚠️ Invalid response format" >> sonar-report.md
          echo "Raw response: ${QUALITY_GATE_RESPONSE}" >> sonar-report.md
        fi
      fi
      echo "" >> sonar-report.md
      
      # 메트릭 정보 가져오기
      echo "#### Quality Metrics" >> sonar-report.md
      echo "Getting metrics data..."
      METRICS_RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,security_hotspots,reliability_rating,security_rating,sqale_rating")
      
      if [ -n "${METRICS_RESPONSE}" ] && echo "${METRICS_RESPONSE}" | jq empty 2>/dev/null; then
        echo "| Metric | Value | Rating |" >> sonar-report.md
        echo "|--------|-------|---------|" >> sonar-report.md
        
        # 메트릭 파싱 및 출력
        echo "${METRICS_RESPONSE}" | jq -r '.component.measures[] | select(.value != null) | "| \(.metric) | \(.value) | \(
          if .metric == "reliability_rating" or 
              .metric == "security_rating" or 
              .metric == "sqale_rating" 
          then
            if .value == "1.0" then "A"
            elif .value == "2.0" then "B"
            elif .value == "3.0" then "C"
            elif .value == "4.0" then "D"
            elif .value == "5.0" then "E"
            else "-"
            end
          else "-"
          end
        ) |"' >> sonar-report.md
      else
        echo "Failed to get metrics data" >> sonar-report.md
      fi
      
      echo "" >> sonar-report.md
      
      # 이슈 정보 가져오기
      echo "#### Issues" >> sonar-report.md
      echo "" >> sonar-report.md
      
      for SEVERITY in "BLOCKER" "CRITICAL" "MAJOR"; do
        echo "Getting ${SEVERITY} issues..."
        ISSUES_RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894&severities=${SEVERITY}&resolved=false")
        
        if [ -n "${ISSUES_RESPONSE}" ] && echo "${ISSUES_RESPONSE}" | jq empty 2>/dev/null; then
          TOTAL=$(echo "${ISSUES_RESPONSE}" | jq -r '.total')
          
          if [ "${TOTAL}" != "0" ]; then
            case "${SEVERITY}" in
              "BLOCKER") ICON="🚫";;
              "CRITICAL") ICON="❗";;
              "MAJOR") ICON="⚠️";;
            esac
            
            echo "${ICON} **${SEVERITY} Issues** (${TOTAL})" >> sonar-report.md
            echo "| Rule | Message | File |" >> sonar-report.md
            echo "|------|---------|------|" >> sonar-report.md
            
            echo "${ISSUES_RESPONSE}" | jq -r '.issues[] | "| \(.rule) | \(.message) | \(.component) |"' >> sonar-report.md
            echo "" >> sonar-report.md
          fi
        else
          echo "Failed to get ${SEVERITY} issues data" >> sonar-report.md
        fi
      done
      
      echo "---" >> sonar-report.md
      echo "🔍 [View detailed report](${{ secrets.SONAR_HOST_URL }}/dashboard?id=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894)" >> sonar-report.md
      
      # GitHub 환경 변수에 저장
      echo "comment<<EOF" >> $GITHUB_ENV
      cat sonar-report.md >> $GITHUB_ENV
      echo "EOF" >> $GITHUB_ENV
      
      # 디버그 출력
      echo "Final report content:"
      cat sonar-report.md
    continue-on-error: true

# PR에 결과 코멘트 추가
- name: Add PR Comment
  if: github.event_name == 'pull_request'
  uses: marocchino/sticky-pull-request-comment@v2
  with:
    message: ${{ env.comment }}
    header: sonarqube-report