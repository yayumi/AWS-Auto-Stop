name: SonarQube Analysis and Build
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      # SonarQube 스캔
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894
            -Dsonar.sources=.
            -Dsonar.python.version=3.8

      # Quality Gate 상태 확인 및 PR에 결과 표시
      - name: Check Quality Gate Status
        id: sonarqube-quality-gate
        run: |
          sleep 10  # SonarQube 분석 결과 업데이트 대기
          
          echo "### SonarQube Analysis Results" > sonar-report.md
          echo "" >> sonar-report.md
          
          # API 응답 확인
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894" > response.json
          
          if [ -s response.json ]; then
            if jq -e . response.json > /dev/null 2>&1; then
              STATUS=$(jq -r '.projectStatus.status // "UNKNOWN"' response.json)
              
              # 상태에 따른 이모지 설정
              if [ "$STATUS" = "OK" ]; then
                STATUS_EMOJI="✅"
              elif [ "$STATUS" = "ERROR" ]; then
                STATUS_EMOJI="❌"
              else
                STATUS_EMOJI="⚠️"
              fi
              
              echo "#### Quality Gate Status: ${STATUS_EMOJI} ${STATUS}" >> sonar-report.md
              echo "" >> sonar-report.md
              
              # 메트릭 정보 가져오기
              curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,security_hotspots" > metrics.json
              
              if [ -s metrics.json ]; then
                echo "#### Quality Metrics:" >> sonar-report.md
                echo "" >> sonar-report.md
                echo "| Metric | Value |" >> sonar-report.md
                echo "|--------|-------|" >> sonar-report.md
                
                jq -r '.component.measures[] | select(.value != null) | "| \(.metric) | \(.value) |"' metrics.json >> sonar-report.md
                
                # 이슈 정보 가져오기
                echo "" >> sonar-report.md
                echo "#### Recent Issues:" >> sonar-report.md
                echo "" >> sonar-report.md
                
                ISSUES=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894&resolved=false&ps=5")
                
                if [ -s "$(echo $ISSUES)" ]; then
                  echo "| Type | Message | File |" >> sonar-report.md
                  echo "|------|---------|------|" >> sonar-report.md
                  jq -r '.issues[] | "| \(.severity) | \(.message) | \(.component) |"' <<< "$ISSUES" >> sonar-report.md
                fi
              fi
              
              echo "" >> sonar-report.md
              echo "🔍 [View detailed report](${{ secrets.SONAR_HOST_URL }}/dashboard?id=yayumi_AWS-Auto-Stop_158bc810-b369-4089-be0b-d9c6b7209894)" >> sonar-report.md
            else
              echo "⚠️ Error parsing SonarQube response" >> sonar-report.md
            fi
          else
            echo "⚠️ No response from SonarQube API" >> sonar-report.md
          fi
          
          # PR 이벤트인 경우에만 코멘트 생성
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "SONAR_REPORT<<EOF" >> $GITHUB_ENV
            cat sonar-report.md >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
        continue-on-error: true

      # PR에 결과 코멘트 추가
      - name: Add PR Comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: sonarqube-report
          message: ${{ env.SONAR_REPORT }}

      # 다음 빌드 단계 계속 진행
      - name: Continue with build
        run: |
          echo "Continuing with build process..."
          # 여기에 추가 빌드 스텝 추가
